#!/usr/bin/env php
<?php declare(strict_types = 1);

use Enuage\VersionUpdaterBundle\Command\UpdateVersionCommand;
use Enuage\VersionUpdaterBundle\Console\ConsoleKernel;
use Enuage\VersionUpdaterBundle\DependencyInjection\Configuration;
use Enuage\VersionUpdaterBundle\Helper\Type\FileType;
use Enuage\VersionUpdaterBundle\Parser\ConfigurationParser;
use Enuage\VersionUpdaterBundle\Service\VersionService;
use Symfony\Bundle\FrameworkBundle\Console\Application;

gc_disable();

$prodAutoload = getcwd().'/vendor/autoload.php';
if (is_file($prodAutoload)) {
    /** @noinspection PhpIncludeInspection */
    require_once $prodAutoload;
}

$devAutoload = __DIR__.'/../vendor/autoload.php';
if (is_file($devAutoload)) {
    /** @noinspection PhpIncludeInspection */
    require_once $devAutoload;
}

$kernel = new ConsoleKernel('prod', false);
$application = new Application($kernel);

$configurations = null;
$configurationFilePath = getcwd().DIRECTORY_SEPARATOR.Configuration::CONFIG_FILE;
if (is_file($configurationFilePath)) {
    $configurations = ConfigurationParser::parseFile(Configuration::CONFIG_FILE);
}

$command = new UpdateVersionCommand($configurations);

$application->setName('Ã©Nuage version updater command');

$versionService = new VersionService();
$version = $versionService->getVersionFromFile(__DIR__.'/../composer.json', FileType::TYPE_JSON_COMPOSER);
$application->setVersion($version);

$application->add($command);
$application->setDefaultCommand(UpdateVersionCommand::COMMAND_NAME, true);

/** @noinspection PhpUnhandledExceptionInspection */
$application->run();
